// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository.DAL;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainModels.Models.Entities.FunctionalArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FunctionalAreas");
                });

            modelBuilder.Entity("DomainModels.Models.Entities.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("DomainModels.Models.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DomainModels.Models.Entities.RoleOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FunctionalAreaId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FunctionalAreaId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("VenueId");

                    b.ToTable("RoleOffers");
                });

            modelBuilder.Entity("DomainModels.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage1FluencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage2")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage2FluencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage3")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage3FluencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage4")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalLanguage4FluencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("AlergiesOther")
                        .HasColumnType("text");

                    b.Property<string>("ArabicFluencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("AreaOfStudy")
                        .HasColumnType("text");

                    b.Property<string>("AvailabilityDuringTournament")
                        .HasColumnType("text");

                    b.Property<string>("CandidateUnder18")
                        .HasColumnType("text");

                    b.Property<string>("CastOptions")
                        .HasColumnType("text");

                    b.Property<bool>("CastYesNo")
                        .HasColumnType("boolean");

                    b.Property<bool>("CeremoniesYesNo")
                        .HasColumnType("boolean");

                    b.Property<string>("CertifiedTranslatorLanguage")
                        .HasColumnType("text");

                    b.Property<byte>("Country")
                        .HasColumnType("smallint");

                    b.Property<byte>("CountryIssued")
                        .HasColumnType("smallint");

                    b.Property<string>("Covid19Vaccinated")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentOccupation")
                        .HasColumnType("text");

                    b.Property<string>("DailyAvailabilityShiftAfternoon")
                        .HasColumnType("text");

                    b.Property<string>("DailyAvailabilityShiftNight")
                        .HasColumnType("text");

                    b.Property<string>("DailyAvailabilityShiftOvernight")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescribeYourItSkills")
                        .HasColumnType("text");

                    b.Property<string>("DietaryRequirementIdentification")
                        .HasColumnType("text");

                    b.Property<string>("DisabilityOthers")
                        .HasColumnType("text");

                    b.Property<string>("DisabilityType")
                        .HasColumnType("text");

                    b.Property<bool>("DisabilityYesNo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DrivingLicenseType")
                        .HasColumnType("text");

                    b.Property<string>("EducationOnechoice")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EnglishFluencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("EventsTypeParticipations")
                        .HasColumnType("text");

                    b.Property<string>("FinalVaccineDoseDate")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FwcAreYouInterestedInALeadershipRole")
                        .HasColumnType("text");

                    b.Property<string>("FwcAvailabilityPreTournamentStageOne")
                        .HasColumnType("text");

                    b.Property<string>("FwcAvailabilityPreTournamentStageTwo")
                        .HasColumnType("text");

                    b.Property<string>("FwcLeadershipExperience")
                        .HasColumnType("text");

                    b.Property<string>("GenderForAccreditation")
                        .HasColumnType("text");

                    b.Property<DateTime>("IdDocumentCountryOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IdDocumentExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IdDocumentExpiryDateQ22")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdDocumentType")
                        .HasColumnType("text");

                    b.Property<string>("InternationalAccommodationPreference")
                        .HasColumnType("text");

                    b.Property<string>("InterpretationAndTranslationExperience")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguagePathEnglishArabic")
                        .HasColumnType("text");

                    b.Property<string>("LanguagesOther")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LeaveOrArrange")
                        .HasColumnType("text");

                    b.Property<string>("LocalInternationalVolunteer")
                        .HasColumnType("text");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("text");

                    b.Property<string>("MotivationToVolunteerAtFwc")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityAddress")
                        .HasColumnType("text");

                    b.Property<byte>("Nationality")
                        .HasColumnType("smallint");

                    b.Property<string>("OtherEventType")
                        .HasColumnType("text");

                    b.Property<string>("OtherRole")
                        .HasColumnType("text");

                    b.Property<DateTime>("PassportExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportType")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<string>("PreferredFunctionalArea")
                        .HasColumnType("text");

                    b.Property<string>("PreviousVolunteeringExperience")
                        .HasColumnType("text");

                    b.Property<bool>("QatariDrivingLicense")
                        .HasColumnType("boolean");

                    b.Property<string>("QidNumber")
                        .HasColumnType("text");

                    b.Property<string>("Skill1")
                        .HasColumnType("text");

                    b.Property<string>("Skill2")
                        .HasColumnType("text");

                    b.Property<string>("Skill3")
                        .HasColumnType("text");

                    b.Property<string>("Skill4")
                        .HasColumnType("text");

                    b.Property<string>("Skill5")
                        .HasColumnType("text");

                    b.Property<string>("Skill6")
                        .HasColumnType("text");

                    b.Property<string>("SocialWorkerCaregiverSupport")
                        .HasColumnType("text");

                    b.Property<string>("SpecialDietaryOptions")
                        .HasColumnType("text");

                    b.Property<string>("SpecialGroupsInternational")
                        .HasColumnType("text");

                    b.Property<string>("VaccineTypeMultiSelect")
                        .HasColumnType("text");

                    b.Property<string>("VolunteerExperience")
                        .HasColumnType("text");

                    b.Property<string>("VolunteerHoursYearly")
                        .HasColumnType("text");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.Property<string>("daily_availability_shift_morning")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DomainModels.Models.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainModels.Models.Entities.RoleOffer", b =>
                {
                    b.HasOne("DomainModels.Models.Entities.FunctionalArea", "FunctionalArea")
                        .WithMany()
                        .HasForeignKey("FunctionalAreaId");

                    b.HasOne("DomainModels.Models.Entities.JobTitle", null)
                        .WithMany("RoleOffers")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("DomainModels.Models.Entities.Location", "Location")
                        .WithMany("RoleOffers")
                        .HasForeignKey("LocationId");

                    b.HasOne("DomainModels.Models.Entities.Venue", "Venue")
                        .WithMany("RoleOffers")
                        .HasForeignKey("VenueId");

                    b.Navigation("FunctionalArea");

                    b.Navigation("Location");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DomainModels.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DomainModels.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModels.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DomainModels.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModels.Models.Entities.JobTitle", b =>
                {
                    b.Navigation("RoleOffers");
                });

            modelBuilder.Entity("DomainModels.Models.Entities.Location", b =>
                {
                    b.Navigation("RoleOffers");
                });

            modelBuilder.Entity("DomainModels.Models.Entities.Venue", b =>
                {
                    b.Navigation("RoleOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
